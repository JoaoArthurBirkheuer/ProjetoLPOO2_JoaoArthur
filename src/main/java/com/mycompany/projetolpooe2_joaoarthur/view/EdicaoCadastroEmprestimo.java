/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projetolpooe2_joaoarthur.view;

import com.mycompany.projetolpooe2_joaoarthur.model.Emprestimo;
import com.mycompany.projetolpooe2_joaoarthur.model.Funcionario;
import com.mycompany.projetolpooe2_joaoarthur.model.Usuario;
import com.mycompany.projetolpooe2_joaoarthur.view.TelaEmprestimos;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class EdicaoCadastroEmprestimo extends javax.swing.JFrame {

    /**
     * Creates new form EdicaoCadastroEmprestimo
     */
    private Integer idEmprestimo;
    private JFrame parent;
    public EdicaoCadastroEmprestimo(JFrame parent, Integer idEmprestimo) {
        this.parent = parent;
        this.idEmprestimo = idEmprestimo;
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        carregarDadosEmprestimos(idEmprestimo);
    }

   private void carregarDadosEmprestimos(Integer idEmprestimo) {
    EntityManager em = null;

    try {
        em = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur").createEntityManager();

        // SQL nativa corrigida
        String sql = """
            SELECT e.id AS idEmprestimo,
                   COALESCE(e.funcionario_id, e.usuario_id) AS pessoaId,
                   CASE WHEN e.funcionario_id IS NOT NULL THEN f.nome ELSE u.nome END AS pessoaNome,
                   CASE WHEN e.funcionario_id IS NOT NULL THEN 'F' ELSE 'U' END AS tipoPessoa,
                   STRING_AGG(CAST(el.livro_id AS TEXT), ', ') AS livrosIds
            FROM tb_emprestimo e
            LEFT JOIN tb_funcionario f ON e.funcionario_id = f.idpessoa
            LEFT JOIN tb_usuario u ON e.usuario_id = u.idpessoa
            LEFT JOIN tb_emprestimo_livro el ON el.emprestimo_id = e.id
            WHERE e.id = :idEmprestimo
            GROUP BY e.id, f.nome, u.nome, e.funcionario_id, e.usuario_id
        """;

        // Criar consulta nativa
        Query query = em.createNativeQuery(sql);
        query.setParameter("idEmprestimo", idEmprestimo);

        Object[] result = (Object[]) query.getSingleResult();

        if (result != null) {
            // Extrair informações da consulta
            // String idEmprestimoString = 
            Long pessoaId = result[1] != null ? ((BigInteger) result[1]).longValue() : null;// ID da pessoa associada
            String pessoaNome = (String) result[2]; // Nome da pessoa
            String tipoPessoa = (String) result[3]; // 'U' ou 'F' para tipo de pessoa
            String livrosIds = result[4] != null ? result[4].toString() : ""; // IDs dos livros

            // Preencher os JTextFields
            jTextField1.setText(pessoaId + " - " + pessoaNome + " (" + tipoPessoa + ")");
            jTextField2.setText(livrosIds);
            if (result[0] instanceof BigInteger) {
            jTextField5.setText(String.valueOf(((BigInteger) result[0]).longValue()));
            } else if (result[0] instanceof Integer) {
            jTextField5.setText(String.valueOf((Integer) result[0]));
            } else {
            jTextField5.setText("");
                }
        } else {
            JOptionPane.showMessageDialog(this, "Empréstimo não encontrado.");
        }

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
    } finally {
        if (em != null) em.close();
    }
}





    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Edição de Registro de Empréstimo");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel2.setText("Pessoa atual do Empréstimo:");

        jLabel3.setText("Livro(s) atual(is) do Empréstimo:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome", "Cargo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Mostrar Pessoas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Pesquisar:");

        jButton4.setText("Escolher nova Pessoa");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(153, 204, 255));
        jButton5.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        jButton5.setText("Voltar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel5.setText("Pesquisar:");

        jTextField4.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa2();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa2();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa2();
            }
        });

        jButton2.setText("Mostrar Livros");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Incluir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Remover");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Título", "Incluído"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel6.setText("ID:");

        jTextField6.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa1();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa1();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa1();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(53, 53, 53)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(12, 12, 12)
                        .addComponent(jTextField4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(166, 166, 166))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(334, 334, 334)
                        .addComponent(jButton5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Mostrar usuários e funcionários
try {
    DefaultTableModel tblModel = new DefaultTableModel();
    tblModel.addColumn("ID");
    tblModel.addColumn("Nome");
    tblModel.addColumn("Cargo");

    jTable1.setModel(tblModel);
    Connection con = DriverManager.getConnection(
        "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur",
        "postgres",
        "jb12"
    );
    String sql = """
        SELECT idPessoa AS ID, nome, NULL AS Cargo FROM tb_usuario
        UNION
        SELECT idPessoa AS ID, nome, cargo FROM tb_funcionario
        ORDER BY ID;
    """;

    System.out.println("\nPassou aqui\n");

    Statement stmt = con.createStatement();
    ResultSet rs = stmt.executeQuery(sql);

    while (rs.next()) {
        String id = String.valueOf(rs.getLong("ID"));
        String nome = rs.getString("nome");
        String cargo = rs.getString("Cargo");

        tblModel.addRow(new String[]{id, nome, cargo != null ? cargo : ""});
    }

    rs.close();
    stmt.close();
    con.close();

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    EntityManager em = null;
    
    try {
        em = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur").createEntityManager();

        // SQL para pegar todos os livros e verificar se estão no empréstimo
        String sql = """
            SELECT l.idlivro AS livroId,
                   l.titulo AS titulo,
                   CASE WHEN el.livro_id IS NOT NULL THEN 1 ELSE 0 END AS presenteNoEmprestimo
            FROM tb_livro l
            LEFT JOIN tb_emprestimo_livro el ON l.idlivro = el.livro_id AND el.emprestimo_id = :idEmprestimo
        """;

        // Criar consulta
        Query query = em.createNativeQuery(sql);
        query.setParameter("idEmprestimo", idEmprestimo);

        // Executar a consulta
        List<Object[]> resultados = query.getResultList();

        // Obter o modelo da tabela e limpar os dados existentes
        DefaultTableModel tblModel = (DefaultTableModel) jTable2.getModel();
        tblModel.setRowCount(0);

        // Processar os resultados e adicionar à tabela
        for (Object[] resultado : resultados) {
            Integer livroId = (Integer) resultado[0]; // ID do livro
            String titulo = (String) resultado[1]; // Título do livro
            Boolean presenteNoEmprestimo = ((Integer) resultado[2]) == 1; // Livro presente no empréstimo

            // Adicionar linha na tabela
            tblModel.addRow(new Object[]{livroId, titulo, presenteNoEmprestimo});
        }

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar livros: " + ex.getMessage());
    } finally {
        if (em != null) em.close();
    }
    
    

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       // Validar se há uma linha selecionada na tabela de pessoas                                         
    // Validar se há uma linha selecionada na tabela de pessoas
    
    int linhaSelecionada = jTable1.getSelectedRow();
    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(this, "Selecione uma pessoa na tabela.");
        return;
    }

    // Obter o ID do empréstimo do jTextField5
    Integer idEmprestimo;
    try {
        idEmprestimo = Integer.parseInt(jTextField5.getText().trim());
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "ID do empréstimo inválido.");
        return;
    }

    // Obter informações da pessoa selecionada
    Long novaPessoaId = Long.valueOf(jTable1.getValueAt(linhaSelecionada, 0).toString()); // ID da pessoa
    String cargo = jTable1.getValueAt(linhaSelecionada, 2) == null ? "" : jTable1.getValueAt(linhaSelecionada, 2).toString(); // Cargo
    boolean ehFuncionario = !cargo.isEmpty(); // Determinar se é funcionário com base no cargo

    // Confirmar mudança
    int confirmacao = JOptionPane.showConfirmDialog(
        this,
        "Tem certeza de que deseja alterar a pessoa responsável pelo empréstimo?",
        "Confirmação",
        JOptionPane.YES_NO_OPTION
    );

    if (confirmacao != JOptionPane.YES_OPTION) {
        return; // Operação cancelada
    }

    EntityManager em = null;

    try {
        em = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur").createEntityManager();
        em.getTransaction().begin();

        // Buscar o empréstimo
        Emprestimo emprestimo = em.find(Emprestimo.class, idEmprestimo);
        if (emprestimo == null) {
            JOptionPane.showMessageDialog(this, "Empréstimo não encontrado.");
            em.getTransaction().rollback();
            return;
        }

        // Atualizar o responsável pelo empréstimo
        if (ehFuncionario) {
            Funcionario funcionario = em.find(Funcionario.class, novaPessoaId);
            if (funcionario == null) {
                JOptionPane.showMessageDialog(this, "Funcionário não encontrado.");
                em.getTransaction().rollback();
                return;
            }
            emprestimo.setFuncionario(funcionario);
            emprestimo.setUsuario(null); // Garantir que o campo de usuário seja nulo
        } else {
            Usuario usuario = em.find(Usuario.class, novaPessoaId);
            if (usuario == null) {
                JOptionPane.showMessageDialog(this, "Usuário não encontrado.");
                em.getTransaction().rollback();
                return;
            }
            emprestimo.setUsuario(usuario);
            emprestimo.setFuncionario(null); // Garantir que o campo de funcionário seja nulo
        }

        // Persistir alterações
        em.merge(emprestimo);
        em.getTransaction().commit();

        // Mensagem de sucesso
        JOptionPane.showMessageDialog(this, "Mudanças realizadas com sucesso!");

        // Recarregar os dados nos campos de texto
        carregarDadosEmprestimos(idEmprestimo);
    } catch (Exception ex) {
        // Reverter transação em caso de erro
        if (em != null && em.getTransaction().isActive()) {
            em.getTransaction().rollback();
        }
        JOptionPane.showMessageDialog(this, "Erro ao atualizar o empréstimo: " + ex.getMessage());
    } finally {
        if (em != null) em.close();
    }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // incluir livro emprestimo
    int selectedRow = jTable2.getSelectedRow();
    
    // Verificar se algum item foi selecionado
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, selecione um livro da tabela.");
        return;
    }
    
    try {
        // Obter os dados da tabela selecionada
        Integer livroId = (Integer) jTable2.getValueAt(selectedRow, 0); // Obter o ID do livro
        String tituloLivro = (String) jTable2.getValueAt(selectedRow, 1); // Obter título do livro
        Boolean incluido = (Boolean) jTable2.getValueAt(selectedRow, 2); // Obter o status booleano "Incluído"
        
        // Se o livro já estiver incluso no empréstimo
        if (incluido) {
            JOptionPane.showMessageDialog(this, "Este livro já está no empréstimo.");
            return;
        }

        // Caso contrário, solicitar confirmação para inclusão
        int confirmacao = JOptionPane.showConfirmDialog(
            this,
            "Deseja realmente incluir o livro \"" + tituloLivro + "\" no empréstimo?",
            "Confirmação",
            JOptionPane.YES_NO_OPTION
        );

        // Se o usuário confirmar, prosseguir com a inserção
        if (confirmacao == JOptionPane.YES_OPTION) {
            incluirLivroEmprestimo(livroId);
            carregarDadosEmprestimos(Integer.parseInt(jTextField5.getText())); // Carregar novamente os dados no JTextField5
            JOptionPane.showMessageDialog(this, "Livro incluído no empréstimo com sucesso.");
        }

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Erro ao processar a solicitação: " + ex.getMessage());
    }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        // deletar livro do emprestimo
        
        int selectedRow = jTable2.getSelectedRow();
    
    // Verificar se algum item foi selecionado
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, selecione um livro da tabela.");
        return;
    }
    
    try {
        // Obter os dados da tabela selecionada
        Integer livroId = (Integer) jTable2.getValueAt(selectedRow, 0); // Obter o ID do livro
        String tituloLivro = (String) jTable2.getValueAt(selectedRow, 1); // Obter título do livro
        Boolean incluido = (Boolean) jTable2.getValueAt(selectedRow, 2); // Obter o status booleano "Incluído"
        
        // Se o livro não estiver no empréstimo
        if (!incluido) {
            JOptionPane.showMessageDialog(this, "Este livro não está no empréstimo.");
            return;
        }

        // Caso contrário, solicitar confirmação para remoção
        int confirmacao = JOptionPane.showConfirmDialog(
            this,
            "Deseja realmente remover o livro \"" + tituloLivro + "\" do empréstimo?",
            "Confirmação",
            JOptionPane.YES_NO_OPTION
        );

        // Se o usuário confirmar, prosseguir com a exclusão
        if (confirmacao == JOptionPane.YES_OPTION) {
            removerLivroEmprestimo(livroId);
            carregarDadosEmprestimos(Integer.parseInt(jTextField5.getText())); // Carregar novamente os dados no JTextField5
            JOptionPane.showMessageDialog(this, "Livro removido do empréstimo com sucesso.");
        }

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Erro ao processar a solicitação: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton6ActionPerformed
    
    private void incluirLivroEmprestimo(Integer livroId) {
    EntityManager em = null;

    try {
        em = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur").createEntityManager();
        
        em.getTransaction().begin();

        // Executar o comando para associar o livro ao empréstimo
        String sql = "INSERT INTO tb_emprestimo_livro (emprestimo_id, livro_id) VALUES (:emprestimoId, :livroId)";

        Query query = em.createNativeQuery(sql);
        query.setParameter("emprestimoId", Integer.parseInt(jTextField5.getText()));
        query.setParameter("livroId", livroId);

        query.executeUpdate();
        em.getTransaction().commit();
        
    } catch (Exception ex) {
        if (em != null && em.getTransaction().isActive()) {
            em.getTransaction().rollback();
        }
        JOptionPane.showMessageDialog(this, "Erro ao incluir o livro: " + ex.getMessage());
    } finally {
        if (em != null) em.close();
    }
}
    
    private void removerLivroEmprestimo(Integer livroId) {
    EntityManager em = null;

    try {
        em = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur").createEntityManager();
        
        em.getTransaction().begin();

        // Executar o comando para remover o livro do empréstimo
        String sql = "DELETE FROM tb_emprestimo_livro WHERE emprestimo_id = :emprestimoId AND livro_id = :livroId";

        Query query = em.createNativeQuery(sql);
        query.setParameter("emprestimoId", Integer.parseInt(jTextField5.getText()));
        query.setParameter("livroId", livroId);

        query.executeUpdate();
        em.getTransaction().commit();
        
    } catch (Exception ex) {
        if (em != null && em.getTransaction().isActive()) {
            em.getTransaction().rollback();
        }
        JOptionPane.showMessageDialog(this, "Erro ao remover o livro: " + ex.getMessage());
    } finally {
        if (em != null) em.close();
    }
}

    private void realizarPesquisa1() {
    try {
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        tblModel.setRowCount(0);

        Connection con = DriverManager.getConnection(
            "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur",
            "postgres",
            "jb12"
        );

        String sql = """
            SELECT idPessoa AS ID, nome, NULL AS Cargo FROM tb_usuario
            WHERE CAST(idPessoa AS TEXT) ILIKE ? OR nome ILIKE ? 
            UNION
            SELECT idPessoa AS ID, nome, cargo AS Cargo FROM tb_funcionario
            WHERE CAST(idPessoa AS TEXT) ILIKE ? OR nome ILIKE ? OR cargo ILIKE ?
            ORDER BY ID
        """;

        PreparedStatement stmt = con.prepareStatement(sql);
        String pesquisa = jTextField6.getText().trim();
        stmt.setString(1, "%" + pesquisa + "%");
        stmt.setString(2, "%" + pesquisa + "%");
        stmt.setString(3, "%" + pesquisa + "%");
        stmt.setString(4, "%" + pesquisa + "%");
        stmt.setString(5, "%" + pesquisa + "%");

        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String id = String.valueOf(rs.getLong("ID"));
            String nome = rs.getString("nome");
            String cargo = rs.getString("Cargo");

            tblModel.addRow(new String[]{id, nome, cargo != null ? cargo : ""});
        }

        rs.close();
        stmt.close();
        con.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao pesquisar: " + ex.getMessage());
        ex.printStackTrace();
    }
}
    
    private void realizarPesquisa2(){
    try {
    String pesquisa = jTextField4.getText().trim();

    Class.forName("org.postgresql.Driver");

    Connection con = DriverManager.getConnection(
        "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur", 
        "postgres", 
        "jb12"
    );

    Statement st = con.createStatement();
    String sql = "SELECT idLivro, titulo FROM tb_livro WHERE idLivro::text ILIKE '%" + pesquisa + "%' OR titulo ILIKE '%" + pesquisa + "%'";
    ResultSet rs = st.executeQuery(sql);

    DefaultTableModel tblModel = (DefaultTableModel) jTable2.getModel();
    tblModel.setRowCount(0);

    while (rs.next()) {
        String id = String.valueOf(rs.getLong("idLivro"));
        String titulo = rs.getString("titulo");

        String tbData[] = {id, titulo};
        tblModel.addRow(tbData);
    }

    rs.close();
    st.close();
    con.close();
} catch (ClassNotFoundException | SQLException ex) {
    JOptionPane.showMessageDialog(this, "Erro na pesquisa: " + ex.getMessage());
}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Abrir a tela principal
        SwingUtilities.invokeLater(() -> new TelaEmprestimos().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
