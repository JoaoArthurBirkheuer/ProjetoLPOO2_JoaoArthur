/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projetolpooe2_joaoarthur.view;
import com.mycompany.projetolpooe2_joaoarthur.model.*;
import com.mycompany.projetolpooe2_joaoarthur.dao.*;
import com.mycompany.projetolpooe2_joaoarthur.view.EdicaoCadastroUsuario;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Usuario
 */
public class TelaFuncionarios extends javax.swing.JFrame {

    /**
     * Creates new form TelaFuncionarios
     */
    public TelaFuncionarios() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        PersistenciaJPA jpa = new PersistenciaJPA();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Controle e Pesquisa de Usuarios");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel2.setText("Pesquisar:");

        jButton1.setText("Mostrar dados");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Novo registro");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Deletar Selecionado");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Editar Selecionado");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "CPF", "Email", "Cargo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextField1.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addContainerGap(73, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try {
        // Carregar o driver PostgreSQL
        Class.forName("org.postgresql.Driver");

        // Conectar ao banco
        Connection con = DriverManager.getConnection(
            "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur", 
            "postgres", 
            "jb12"
        );

        // Criar Statement
        Statement st = con.createStatement();
        String sql = "SELECT idPessoa, nome, cpf, email, cargo FROM tb_funcionario";
        ResultSet rs = st.executeQuery(sql);

        // Obter o modelo da tabela
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        tblModel.setRowCount(0);// tblModel.setRowCount(0); // Limpa os dados anteriores

        // Popular a tabela
        while (rs.next()) {
            String id = String.valueOf(rs.getLong("idPessoa"));
            String nome = rs.getString("nome");
            String cpf = rs.getString("cpf");
            String email = rs.getString("email");
            String cargo = rs.getString("cargo");

            String tbData[] = {id, nome, cpf, email,cargo};
            tblModel.addRow(tbData);
        }

        // Fechar conex√µes
        rs.close();
        st.close();
        con.close();

    } catch (ClassNotFoundException ex) {
        Logger.getLogger(TelaUsuarios.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(TelaUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Erro ao buscar dados: " + ex.getMessage());
    }
             
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // novo registro
        TelaCadastroFuncionario tcf = new TelaCadastroFuncionario();
        tcf.setVisible(true);
        tcf.setLocationRelativeTo(this);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // deletar
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Selecione uma linha para excluir!");
        return;
    }
    
    // Verificar se a coluna ID na linha selecionada est√° vazia
        String id = (String) jTable1.getValueAt(selectedRow, 0);
        if (id == null || id.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "N√£o √© poss√≠vel excluir registros vazios. Certifique-se de que os dados foram carregados corretamente.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

    // Confirmar exclus√£o
    int confirm = JOptionPane.showConfirmDialog(
        this, 
        "Tem certeza que deseja excluir este registro?", 
        "Confirma√ß√£o", 
        JOptionPane.YES_NO_OPTION
    );

    if (confirm != JOptionPane.YES_OPTION) {
        return; // Usu√°rio cancelou
    }

    // Obter ID do usu√°rio a partir da tabela
    DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
    Long idF = Long.parseLong(tblModel.getValueAt(selectedRow, 0).toString());

    // Apagar registro no banco via JPA
    try {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur");
        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();

        // Buscar o usu√°rio e remover
        Funcionario funcionario = em.find(Funcionario.class, idF);
        if (funcionario != null) {
            // Remover avalia√ß√µes relacionadas
            List<Avaliacao> avaliacoes = em.createQuery(
                    "SELECT a FROM Avaliacao a WHERE a.funcionario.idPessoa = :idF", Avaliacao.class)
                    .setParameter("idUsuario", idF)
                    .getResultList();

            for (Avaliacao avaliacao : avaliacoes) {
                em.remove(avaliacao);
            }

            // Remover empr√©stimos relacionados
            List<Emprestimo> emprestimos = em.createQuery(
                    "SELECT e FROM Emprestimo e WHERE e.funcionario.idPessoa = :idF", Emprestimo.class)
                    .setParameter("idUsuario", idF)
                    .getResultList();

            for (Emprestimo emprestimo : emprestimos) {
                // Limpar a rela√ß√£o com os livros emprestados
                Set<Livro> livrosEmprestados = emprestimo.getLivrosEmprestados();
                if (livrosEmprestados != null) {
                    livrosEmprestados.clear();
                }
                em.remove(emprestimo);
            }

            // Remover o usu√°rio
            em.remove(funcionario);

            System.out.println("Usu√°rio com ID " + idF + " e seus registros relacionados foram deletados.");
        }

        em.getTransaction().commit();
        em.close();
        emf.close();

        // Notificar exclus√£o e atualizar tabela
        JOptionPane.showMessageDialog(this, "Registro exclu√≠do com sucesso!");
        tblModel.removeRow(selectedRow); // Atualiza a tabela
    } catch (Exception ex) {
        Logger.getLogger(TelaUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Erro ao excluir registro: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        // editar
        int linhaSelecionada = jTable1.getSelectedRow();

    if (linhaSelecionada == -1) {
    JOptionPane.showMessageDialog(this, "Por favor, selecione um usu√°rio na tabela.");
    return;
    }

    try {
        // Convers√£o segura para Long
        Long idPessoa = Long.parseLong(jTable1.getValueAt(linhaSelecionada, 0).toString());

        // Passar o ID para a tela de edi√ß√£o
        EdicaoCadastroFuncionario telaEdicao = new EdicaoCadastroFuncionario(this, idPessoa);
        telaEdicao.setVisible(true);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao processar o ID do usu√°rio.");
    }
    }//GEN-LAST:event_jButton4ActionPerformed
    private void realizarPesquisa() {
    try {
        String pesquisa = jTextField1.getText().trim();

        // Carregar o driver PostgreSQL
        Class.forName("org.postgresql.Driver");

        // Conectar ao banco
        Connection con = DriverManager.getConnection(
            "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur", 
            "postgres", 
            "jb12"
        );

        Statement st = con.createStatement();
        String sql = "SELECT idPessoa, nome, cpf, email, cargo FROM tb_funcionario WHERE nome ILIKE '%" + pesquisa + "%' OR cpf ILIKE '%" + pesquisa + "%' OR email ILIKE '%" + pesquisa + "%' OR cargo ILIKE '%" + pesquisa + "%'";
        ResultSet rs = st.executeQuery(sql);

        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        tblModel.setRowCount(0);

        while (rs.next()) {
            String id = String.valueOf(rs.getLong("idPessoa"));
            String nome = rs.getString("nome");
            String cpf = rs.getString("cpf");
            String email = rs.getString("email");
            String cargo = rs.getString("cargo");

            String tbData[] = {id, nome, cpf, email, cargo};
            tblModel.addRow(tbData);
        }

        rs.close();
        st.close();
        con.close();
    } catch (ClassNotFoundException | SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro na pesquisa: " + ex.getMessage());
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaFuncionarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
