/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projetolpooe2_joaoarthur.view;

import com.mycompany.projetolpooe2_joaoarthur.model.Emprestimo;
import com.mycompany.projetolpooe2_joaoarthur.model.Funcionario;
import com.mycompany.projetolpooe2_joaoarthur.model.Livro;
import com.mycompany.projetolpooe2_joaoarthur.model.Usuario;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class TelaCadastroEmprestimo extends javax.swing.JFrame {

    /**
     * Creates new form TelaCadastroEmprestimo
     */
    public TelaCadastroEmprestimo() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    private void realizarPesquisa1() {
    try {
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

        // Limpar a tabela
        tblModel.setRowCount(0);

        // Configurar conexão com o banco
        Connection con = DriverManager.getConnection(
            "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur",
            "postgres",
            "jb12"
        );

        // SQL de pesquisa com filtragem dinâmica por ID, nome ou cargo
        String sql = """
            SELECT idPessoa AS ID, nome, NULL AS Cargo FROM tb_usuario
            WHERE CAST(idPessoa AS TEXT) ILIKE ? OR nome ILIKE ? 
            UNION
            SELECT idPessoa AS ID, nome, cargo AS Cargo FROM tb_funcionario
            WHERE CAST(idPessoa AS TEXT) ILIKE ? OR nome ILIKE ? OR cargo ILIKE ?
            ORDER BY ID
        """;

        PreparedStatement stmt = con.prepareStatement(sql);
        String pesquisa = jTextField3.getText().trim();
        stmt.setString(1, "%" + pesquisa + "%");
        stmt.setString(2, "%" + pesquisa + "%");
        stmt.setString(3, "%" + pesquisa + "%");
        stmt.setString(4, "%" + pesquisa + "%");
        stmt.setString(5, "%" + pesquisa + "%");

        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String id = String.valueOf(rs.getLong("ID"));
            String nome = rs.getString("nome");
            String cargo = rs.getString("Cargo");

            tblModel.addRow(new String[]{id, nome, cargo != null ? cargo : ""});
        }

        rs.close();
        stmt.close();
        con.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao pesquisar: " + ex.getMessage());
        ex.printStackTrace();
    }
}
    
    private void realizarPesquisa2(){
    try {
    String pesquisa = jTextField4.getText().trim();

    // Carregar o driver PostgreSQL
    Class.forName("org.postgresql.Driver");

    // Conectar ao banco
    Connection con = DriverManager.getConnection(
        "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur", 
        "postgres", 
        "jb12"
    );

    Statement st = con.createStatement();
    String sql = "SELECT idLivro, titulo, autor FROM tb_livro WHERE idLivro::text ILIKE '%" + pesquisa + "%' OR titulo ILIKE '%" + pesquisa + "%' OR autor ILIKE '%" + pesquisa + "%'";
    ResultSet rs = st.executeQuery(sql);

    DefaultTableModel tblModel = (DefaultTableModel) jTable2.getModel();
    tblModel.setRowCount(0);

    while (rs.next()) {
        String id = String.valueOf(rs.getLong("idLivro"));
        String titulo = rs.getString("titulo");
        String autor = rs.getString("autor");

        String tbData[] = {id, titulo, autor};
        tblModel.addRow(tbData);
    }

    rs.close();
    st.close();
    con.close();
} catch (ClassNotFoundException | SQLException ex) {
    JOptionPane.showMessageDialog(this, "Erro na pesquisa: " + ex.getMessage());
}
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Cadastro de empréstimo");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel2.setText("Pesquisar:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID Pessoa", "Nome", "Cargo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel3.setText("Pesquisar:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID Livro", "Título", "Autor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jButton1.setText("Mostrar Pessoas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Selecionar Pessoa");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Mostrar Livros");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Selecionar Livro");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cancelar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Confirmar Empréstimo");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel4.setText("Pessoa do empréstimo:");

        jLabel5.setText("Livro(s) do empréstimo:");

        jTextField3.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa1();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa1();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa1();
            }
        });

        jTextField4.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa2();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa2();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                realizarPesquisa2();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField3))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField4))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jButton5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton6))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(215, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(204, 204, 204))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(9, 9, 9)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(28, 28, 28)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
// Mostrar usuários e funcionários
try {
    // Criar o modelo da tabela
    DefaultTableModel tblModel = new DefaultTableModel();
    tblModel.addColumn("ID");
    tblModel.addColumn("Nome");
    tblModel.addColumn("Cargo");

    // Associar o modelo à jTable1
    jTable1.setModel(tblModel);

    // Conexão com o banco
    Connection con = DriverManager.getConnection(
        "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur",
        "postgres",
        "jb12"
    );

    // Consulta SQL com UNION
    String sql = """
        SELECT idPessoa AS ID, nome, NULL AS Cargo FROM tb_usuario
        UNION
        SELECT idPessoa AS ID, nome, cargo FROM tb_funcionario
        ORDER BY ID;
    """;

    System.out.println("\nPassou aqui\n");

    Statement stmt = con.createStatement();
    ResultSet rs = stmt.executeQuery(sql);

    // Adicionar dados ao modelo
    while (rs.next()) {
        String id = String.valueOf(rs.getLong("ID"));
        String nome = rs.getString("nome");
        String cargo = rs.getString("Cargo");

        // Adiciona a linha ao modelo da tabela
        tblModel.addRow(new String[]{id, nome, cargo != null ? cargo : ""});
    }

    // Fechar recursos
    rs.close();
    stmt.close();
    con.close();

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
}

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // mostrar livros
        // Copiar dados de tb_livro para tb_livro_aux e mostrar na jTable2
try {
        Connection con = DriverManager.getConnection(
            "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur",
            "postgres",
            "jb12"
        );

        String consultaLivros = "SELECT idLivro, titulo, autor FROM tb_livro";
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(consultaLivros);

        DefaultTableModel tblModel = new DefaultTableModel();
        tblModel.addColumn("ID");
        tblModel.addColumn("Título");
        tblModel.addColumn("Autor");

        jTable2.setModel(tblModel);

        while (rs.next()) {
            String id = String.valueOf(rs.getLong("idLivro"));
            String titulo = rs.getString("titulo");
            String autor = rs.getString("autor");

            tblModel.addRow(new String[]{id, titulo, autor});
        }

        rs.close();
        stmt.close();
        con.close();
        
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar livros: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
   
// Adicionar livro selecionado ao empréstimo e remover da tabela auxiliar
try {
    int selectedRow = jTable2.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Nenhum livro foi selecionado!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    
    DefaultTableModel tblModel = (DefaultTableModel) jTable2.getModel();
    String idLivro = tblModel.getValueAt(selectedRow, 0).toString(); // Coluna 0 é o ID

    
    int confirm = JOptionPane.showConfirmDialog(
        this,
        "Deseja adicionar o livro com ID " + idLivro + " ao empréstimo?",
        "Confirmação",
        JOptionPane.YES_NO_OPTION
    );

    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    String conteudoAtual = jTextField2.getText().trim();

    if (!conteudoAtual.isEmpty()) {
        String[] ids = conteudoAtual.split(",\\s*");

        if (Arrays.asList(ids).contains(idLivro)) {
            JOptionPane.showMessageDialog(this, "Este livro já foi adicionado!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        conteudoAtual += ", " + idLivro;
    } else {
        conteudoAtual = idLivro;
    }

    jTextField2.setText(conteudoAtual);
    tblModel.removeRow(selectedRow);

    JOptionPane.showMessageDialog(this, "Livro adicionado e removido da tabela com sucesso!");

} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Erro ao adicionar livro: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // selecionar pessoa para empréstimo
try {
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Nenhuma pessoa foi selecionada!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
    String idPessoa = tblModel.getValueAt(selectedRow, 0).toString(); 
    String nomePessoa = tblModel.getValueAt(selectedRow, 1).toString(); 

    String pessoaAtual = jTextField1.getText().trim();

    if (!pessoaAtual.isEmpty()) {
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Você irá trocar a pessoa já selecionada para o empréstimo. Deseja prosseguir?",
            "Confirmação",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        restaurarTabelaPessoas(tblModel, pessoaAtual);
    }

    jTextField1.setText(idPessoa + " - " + nomePessoa);

    tblModel.removeRow(selectedRow);

    JOptionPane.showMessageDialog(this, "Pessoa selecionada com sucesso!");

} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Erro ao selecionar pessoa: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
    // Obter os IDs da pessoa e dos livros
    String pessoaInfo = jTextField1.getText().trim();
    String livrosInfo = jTextField2.getText().trim();

    if (pessoaInfo.isEmpty() || livrosInfo.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Pessoa ou livros não foram selecionados!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String[] pessoaDados = pessoaInfo.split(" - ");
    Long idPessoa = Long.parseLong(pessoaDados[0]);

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur");
    EntityManager em = emf.createEntityManager();

    em.getTransaction().begin();

    Usuario usuario = em.find(Usuario.class, idPessoa);
    Funcionario funcionario = null;

    if (usuario == null) {
        // Tentar localizar como funcionário
        funcionario = em.find(Funcionario.class, idPessoa);
    }

    // Verificar se nenhum dos dois foi encontrado
    if (usuario == null && funcionario == null) {
        JOptionPane.showMessageDialog(this, "Pessoa não encontrada no banco!", "Erro", JOptionPane.ERROR_MESSAGE);
        em.getTransaction().rollback();
        return;
    }

    LocalDate dataEmprestimo = LocalDate.now();
    LocalDate dataDevolucao = (usuario != null)
        ? dataEmprestimo.plusDays(7) // Usuário
        : dataEmprestimo.plusDays(14); // Funcionário

    String[] idsLivros = livrosInfo.split(",\\s*");
    Set<Livro> livrosEmprestados = new HashSet<>();

    for (String idLivroStr : idsLivros) {
        Integer idLivro;
        idLivro = Integer.valueOf(idLivroStr);
        Livro livro = em.find(Livro.class, idLivro);

        if (livro == null) {
            JOptionPane.showMessageDialog(this, "Livro com ID " + idLivro + " não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
            em.getTransaction().rollback();
            return;
        }

        livrosEmprestados.add(livro);
    }

    Emprestimo emprestimo = new Emprestimo();

    if (usuario != null) {
        emprestimo.setUsuario(usuario); // Associar usuário
    } else {
        emprestimo.setFuncionario(funcionario); // Associar funcionário
    }

    emprestimo.setDataEmprestimo(dataEmprestimo);
    emprestimo.setDataDevolucao(dataDevolucao);
    emprestimo.setLivrosEmprestados(livrosEmprestados);

    em.persist(emprestimo);

    em.getTransaction().commit();
    em.close();
    emf.close();

    JOptionPane.showMessageDialog(this, "Empréstimo confirmado com sucesso!");

    jTextField1.setText("");
    jTextField2.setText("");
    this.dispose();
} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Erro ao confirmar empréstimo: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    ex.printStackTrace();
}


    }//GEN-LAST:event_jButton6ActionPerformed

    
    private void restaurarTabelaPessoas(DefaultTableModel tblModel, String pessoaAtual) {
    try {
        // Obter o ID da pessoa que já foi selecionada
        String idRemovido = pessoaAtual.split(" - ")[0].trim();

        // Conexão com o banco
        Connection con = DriverManager.getConnection(
            "jdbc:postgresql://localhost:5432/ProjetoLPOOE2_JoaoArthur",
            "postgres",
            "jb12"
        );

        // Consulta SQL para recarregar a tabela, exceto o ID removido
        String sql = """
            SELECT idPessoa AS ID, nome, NULL AS Cargo FROM tb_usuario
            UNION
            SELECT idPessoa AS ID, nome, cargo FROM tb_funcionario
            WHERE idPessoa::text != ?
            ORDER BY ID;
        """;

        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, idRemovido); // Ignorar a pessoa selecionada
        ResultSet rs = ps.executeQuery();

        // Limpar a tabela antes de restaurar
        tblModel.setRowCount(0);

        // Adicionar dados ao modelo
        while (rs.next()) {
            String id = String.valueOf(rs.getLong("ID"));
            String nome = rs.getString("nome");
            String cargo = rs.getString("Cargo");

            tblModel.addRow(new String[]{id, nome, cargo != null ? cargo : ""});
        }

        rs.close();
        ps.close();
        con.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao restaurar tabela: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCadastroEmprestimo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
