/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projetolpooe2_joaoarthur.view;

import com.mycompany.projetolpooe2_joaoarthur.model.Livro;
import com.mycompany.projetolpooe2_joaoarthur.model.Usuario;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Usuario
 */
public class EdicaoCadastroLivro extends javax.swing.JFrame {

    /**
     * Creates new form EdicaoCadastroLivro
     */
    private Integer idLivro;
    private JFrame parent;
    
    public EdicaoCadastroLivro(JFrame parent, Integer idLivro) {
         initComponents();
        this.parent = parent; // Atribui corretamente o JFrame que chamou esta janela
        this.idLivro = idLivro; // Usa o ID correto passado como parâmetro
        carregarDados(); // Chama o método para carregar os dados do livro
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    private void carregarDados() {
        EntityManager em = null;
        try {
            em = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur").createEntityManager();
            Livro livro = em.find(Livro.class, idLivro);

            if (livro != null) {
                jTextField1.setText(livro.getTitulo());
                jTextField2.setText(livro.getAutor());
            } else {
                JOptionPane.showMessageDialog(this, "Usuário não encontrado.");
                dispose();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + ex.getMessage());
        } finally {
            if (em != null) em.close();
        }
    }
    
    private void atualizarDados() {
        EntityManager em = null;
        EntityTransaction transaction = null;

        try {
            em = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur").createEntityManager();
            transaction = em.getTransaction();
            transaction.begin();

            Livro livro = em.find(Livro.class, idLivro);
            if (livro != null) {
                livro.setTitulo(jTextField1.getText());
                livro.setAutor(jTextField2.getText());
                em.persist(livro);
                transaction.commit();
                JOptionPane.showMessageDialog(this, "Dados atualizados com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Usuário não encontrado para atualização.");
            }
        } catch (Exception ex) {
            if (transaction != null) transaction.rollback();
            JOptionPane.showMessageDialog(this, "Erro ao atualizar dados: " + ex.getMessage());
        } finally {
            if (em != null) em.close();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Edição de Registro de Livro");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel2.setText("Título:");

        jLabel3.setText("Autor:");

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Realizar alterações");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addComponent(jTextField2)
                            .addComponent(jTextField1))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jTextField1.getText().trim().isEmpty()) {
    JOptionPane.showMessageDialog(this, "O campo Título não pode estar vazio.", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

if (jTextField2.getText().trim().isEmpty()) {
    JOptionPane.showMessageDialog(this, "O campo Autor não pode estar vazio.", "Erro", JOptionPane.ERROR_MESSAGE);
    return;
}

try {
    // Conexão com o banco
    EntityManager em = Persistence.createEntityManagerFactory("ProjetoLPOOE2_JoaoArthur").createEntityManager();

    // Buscar o livro no banco
    Livro livro = em.find(Livro.class, idLivro);

    if (livro == null) {
        JOptionPane.showMessageDialog(this, "Livro não encontrado no banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
        em.close();
        return;
    }

    String novoTitulo = jTextField1.getText().trim();
    String novoAutor = jTextField2.getText().trim();

    // Verificar se há outro livro com o mesmo título e autor
    TypedQuery<Long> query = em.createQuery(
        "SELECT COUNT(l) FROM Livro l WHERE l.titulo = :titulo AND l.autor = :autor AND l.idLivro <> :idLivro",
        Long.class
    );
    query.setParameter("titulo", novoTitulo);
    query.setParameter("autor", novoAutor);
    query.setParameter("idLivro", livro.getIdLivro());
    Long count = query.getSingleResult();

    if (count > 0) {
        JOptionPane.showMessageDialog(
            this,
            "Já existe outro livro cadastrado com o mesmo título e autor!",
            "Erro de Validação",
            JOptionPane.ERROR_MESSAGE
        );
        em.close();
        return;
    }

    // Atualizando os dados do livro
    em.getTransaction().begin();
    livro.setTitulo(novoTitulo);
    livro.setAutor(novoAutor);
    em.persist(livro); // Salva as mudanças
    em.getTransaction().commit();
    em.close();

    JOptionPane.showMessageDialog(this, "Dados atualizados com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    this.dispose();

} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Erro ao salvar dados: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // Configurar o look and feel para melhorar o design
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Abrir a tela principal
        SwingUtilities.invokeLater(() -> new TelaLivros().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
